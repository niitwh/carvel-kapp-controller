// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/vmware-tanzu/carvel-kapp-controller/pkg/apiserver/apis/datapackaging/v1alpha1/generated.proto

package v1alpha1

import (
	fmt "fmt"

	io "io"

	proto "github.com/gogo/protobuf/proto"
	v1alpha1 "github.com/vmware-tanzu/carvel-kapp-controller/pkg/apis/kappctrl/v1alpha1"

	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *AppTemplateSpec) Reset()      { *m = AppTemplateSpec{} }
func (*AppTemplateSpec) ProtoMessage() {}
func (*AppTemplateSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff0bf4d4d6edd19a, []int{0}
}
func (m *AppTemplateSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppTemplateSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppTemplateSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppTemplateSpec.Merge(m, src)
}
func (m *AppTemplateSpec) XXX_Size() int {
	return m.Size()
}
func (m *AppTemplateSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AppTemplateSpec.DiscardUnknown(m)
}

var xxx_messageInfo_AppTemplateSpec proto.InternalMessageInfo

func (m *IncludedSoftware) Reset()      { *m = IncludedSoftware{} }
func (*IncludedSoftware) ProtoMessage() {}
func (*IncludedSoftware) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff0bf4d4d6edd19a, []int{1}
}
func (m *IncludedSoftware) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncludedSoftware) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IncludedSoftware) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncludedSoftware.Merge(m, src)
}
func (m *IncludedSoftware) XXX_Size() int {
	return m.Size()
}
func (m *IncludedSoftware) XXX_DiscardUnknown() {
	xxx_messageInfo_IncludedSoftware.DiscardUnknown(m)
}

var xxx_messageInfo_IncludedSoftware proto.InternalMessageInfo

func (m *Maintainer) Reset()      { *m = Maintainer{} }
func (*Maintainer) ProtoMessage() {}
func (*Maintainer) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff0bf4d4d6edd19a, []int{2}
}
func (m *Maintainer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Maintainer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Maintainer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Maintainer.Merge(m, src)
}
func (m *Maintainer) XXX_Size() int {
	return m.Size()
}
func (m *Maintainer) XXX_DiscardUnknown() {
	xxx_messageInfo_Maintainer.DiscardUnknown(m)
}

var xxx_messageInfo_Maintainer proto.InternalMessageInfo

func (m *Package) Reset()      { *m = Package{} }
func (*Package) ProtoMessage() {}
func (*Package) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff0bf4d4d6edd19a, []int{3}
}
func (m *Package) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Package) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Package) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Package.Merge(m, src)
}
func (m *Package) XXX_Size() int {
	return m.Size()
}
func (m *Package) XXX_DiscardUnknown() {
	xxx_messageInfo_Package.DiscardUnknown(m)
}

var xxx_messageInfo_Package proto.InternalMessageInfo

func (m *PackageList) Reset()      { *m = PackageList{} }
func (*PackageList) ProtoMessage() {}
func (*PackageList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff0bf4d4d6edd19a, []int{4}
}
func (m *PackageList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PackageList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PackageList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageList.Merge(m, src)
}
func (m *PackageList) XXX_Size() int {
	return m.Size()
}
func (m *PackageList) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageList.DiscardUnknown(m)
}

var xxx_messageInfo_PackageList proto.InternalMessageInfo

func (m *PackageMetadata) Reset()      { *m = PackageMetadata{} }
func (*PackageMetadata) ProtoMessage() {}
func (*PackageMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff0bf4d4d6edd19a, []int{5}
}
func (m *PackageMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PackageMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PackageMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageMetadata.Merge(m, src)
}
func (m *PackageMetadata) XXX_Size() int {
	return m.Size()
}
func (m *PackageMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_PackageMetadata proto.InternalMessageInfo

func (m *PackageMetadataList) Reset()      { *m = PackageMetadataList{} }
func (*PackageMetadataList) ProtoMessage() {}
func (*PackageMetadataList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff0bf4d4d6edd19a, []int{6}
}
func (m *PackageMetadataList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PackageMetadataList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PackageMetadataList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageMetadataList.Merge(m, src)
}
func (m *PackageMetadataList) XXX_Size() int {
	return m.Size()
}
func (m *PackageMetadataList) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageMetadataList.DiscardUnknown(m)
}

var xxx_messageInfo_PackageMetadataList proto.InternalMessageInfo

func (m *PackageMetadataSpec) Reset()      { *m = PackageMetadataSpec{} }
func (*PackageMetadataSpec) ProtoMessage() {}
func (*PackageMetadataSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff0bf4d4d6edd19a, []int{7}
}
func (m *PackageMetadataSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PackageMetadataSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PackageMetadataSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageMetadataSpec.Merge(m, src)
}
func (m *PackageMetadataSpec) XXX_Size() int {
	return m.Size()
}
func (m *PackageMetadataSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageMetadataSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PackageMetadataSpec proto.InternalMessageInfo

func (m *PackageSpec) Reset()      { *m = PackageSpec{} }
func (*PackageSpec) ProtoMessage() {}
func (*PackageSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff0bf4d4d6edd19a, []int{8}
}
func (m *PackageSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PackageSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PackageSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageSpec.Merge(m, src)
}
func (m *PackageSpec) XXX_Size() int {
	return m.Size()
}
func (m *PackageSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PackageSpec proto.InternalMessageInfo

func (m *Revoked) Reset()      { *m = Revoked{} }
func (*Revoked) ProtoMessage() {}
func (*Revoked) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff0bf4d4d6edd19a, []int{9}
}
func (m *Revoked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Revoked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Revoked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Revoked.Merge(m, src)
}
func (m *Revoked) XXX_Size() int {
	return m.Size()
}
func (m *Revoked) XXX_DiscardUnknown() {
	xxx_messageInfo_Revoked.DiscardUnknown(m)
}

var xxx_messageInfo_Revoked proto.InternalMessageInfo

func (m *ValuesSchema) Reset()      { *m = ValuesSchema{} }
func (*ValuesSchema) ProtoMessage() {}
func (*ValuesSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff0bf4d4d6edd19a, []int{10}
}
func (m *ValuesSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValuesSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ValuesSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValuesSchema.Merge(m, src)
}
func (m *ValuesSchema) XXX_Size() int {
	return m.Size()
}
func (m *ValuesSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_ValuesSchema.DiscardUnknown(m)
}

var xxx_messageInfo_ValuesSchema proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AppTemplateSpec)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apiserver.apis.datapackaging.v1alpha1.AppTemplateSpec")
	proto.RegisterType((*IncludedSoftware)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apiserver.apis.datapackaging.v1alpha1.IncludedSoftware")
	proto.RegisterType((*Maintainer)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apiserver.apis.datapackaging.v1alpha1.Maintainer")
	proto.RegisterType((*Package)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apiserver.apis.datapackaging.v1alpha1.Package")
	proto.RegisterType((*PackageList)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apiserver.apis.datapackaging.v1alpha1.PackageList")
	proto.RegisterType((*PackageMetadata)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apiserver.apis.datapackaging.v1alpha1.PackageMetadata")
	proto.RegisterType((*PackageMetadataList)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apiserver.apis.datapackaging.v1alpha1.PackageMetadataList")
	proto.RegisterType((*PackageMetadataSpec)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apiserver.apis.datapackaging.v1alpha1.PackageMetadataSpec")
	proto.RegisterType((*PackageSpec)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apiserver.apis.datapackaging.v1alpha1.PackageSpec")
	proto.RegisterType((*Revoked)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apiserver.apis.datapackaging.v1alpha1.Revoked")
	proto.RegisterType((*ValuesSchema)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apiserver.apis.datapackaging.v1alpha1.ValuesSchema")
}

func init() {
	proto.RegisterFile("github.com/vmware-tanzu/carvel-kapp-controller/pkg/apiserver/apis/datapackaging/v1alpha1/generated.proto", fileDescriptor_ff0bf4d4d6edd19a)
}

var fileDescriptor_ff0bf4d4d6edd19a = []byte{
	// 1128 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xcf, 0x3a, 0x6e, 0xed, 0x8c, 0x93, 0x26, 0xdf, 0xe9, 0x17, 0x61, 0xe5, 0xe0, 0x44, 0x3e,
	0x40, 0x8a, 0x94, 0x31, 0x09, 0xa5, 0xaa, 0xc4, 0x29, 0x6e, 0x10, 0x0a, 0x6a, 0xda, 0x68, 0x5c,
	0x45, 0x80, 0x50, 0xc3, 0x64, 0xfd, 0x62, 0x4f, 0xbd, 0x3f, 0xa6, 0xbb, 0xe3, 0x2d, 0xe1, 0x84,
	0xc4, 0xcf, 0x13, 0x70, 0x41, 0x1c, 0xb8, 0x70, 0xe7, 0xc2, 0x9f, 0x91, 0x63, 0x8f, 0x3d, 0x45,
	0xc4, 0x48, 0xfc, 0x05, 0x70, 0x47, 0x33, 0x3b, 0xfb, 0xc3, 0x6b, 0xac, 0x96, 0x48, 0xee, 0x6d,
	0xfc, 0x7e, 0x7d, 0xde, 0x7b, 0x9f, 0x37, 0x6f, 0xc7, 0xa8, 0xdf, 0xe3, 0xb2, 0x3f, 0x3c, 0x26,
	0xb6, 0xef, 0xb6, 0x22, 0xf7, 0x09, 0x0b, 0x60, 0x53, 0x32, 0xef, 0xb3, 0x61, 0xcb, 0x66, 0x41,
	0x04, 0xce, 0xe6, 0x80, 0x09, 0xb1, 0x69, 0xfb, 0x9e, 0x0c, 0x7c, 0xc7, 0x81, 0xa0, 0x25, 0x06,
	0xbd, 0x16, 0x13, 0x3c, 0x84, 0x20, 0x82, 0x40, 0x9f, 0x5a, 0x5d, 0x26, 0x99, 0x60, 0xf6, 0x80,
	0xf5, 0xb8, 0xd7, 0x6b, 0x45, 0x5b, 0xcc, 0x11, 0x7d, 0xb6, 0xd5, 0xea, 0x81, 0x07, 0x01, 0x93,
	0xd0, 0x25, 0x22, 0xf0, 0xa5, 0x8f, 0x3f, 0xc8, 0x90, 0x48, 0x8c, 0x74, 0xa4, 0x91, 0x48, 0x8c,
	0x74, 0xa4, 0x90, 0x8e, 0x32, 0x24, 0x22, 0x06, 0x3d, 0x92, 0x22, 0xe9, 0x13, 0x19, 0x43, 0x22,
	0x09, 0xd2, 0xea, 0x66, 0xae, 0x86, 0x9e, 0xdf, 0xf3, 0x5b, 0x1a, 0xf0, 0x78, 0x78, 0xa2, 0x7f,
	0xe9, 0x1f, 0xfa, 0x14, 0x27, 0xb2, 0xfa, 0xe1, 0x25, 0x4b, 0x6e, 0x29, 0x85, 0x2d, 0x03, 0x67,
	0x6a, 0x8d, 0xab, 0x37, 0x07, 0xb7, 0x43, 0xc2, 0x7d, 0x65, 0xee, 0x32, 0xbb, 0xcf, 0x3d, 0x08,
	0x4e, 0x33, 0x7f, 0x17, 0x24, 0x6b, 0x45, 0x93, 0x5e, 0xad, 0x69, 0x5e, 0xc1, 0xd0, 0x93, 0xdc,
	0x85, 0x09, 0x87, 0x5b, 0xcf, 0x73, 0x08, 0xed, 0x3e, 0xb8, 0xac, 0xe8, 0xd7, 0xfc, 0xc2, 0x42,
	0xcb, 0x3b, 0x42, 0x3c, 0x00, 0x57, 0x38, 0x4c, 0x42, 0x47, 0x80, 0x8d, 0x05, 0x2a, 0x87, 0x02,
	0xec, 0xba, 0xb5, 0x6e, 0x6d, 0xd4, 0xb6, 0x29, 0xb9, 0x24, 0x4b, 0x24, 0x69, 0x4e, 0x4a, 0x0b,
	0xd9, 0x11, 0x42, 0x21, 0xb4, 0xab, 0xa3, 0xf3, 0xb5, 0xb2, 0x3a, 0x51, 0x8d, 0xd4, 0xfc, 0xd5,
	0x42, 0x2b, 0x7b, 0x9e, 0xed, 0x0c, 0xbb, 0xd0, 0xed, 0xf8, 0x27, 0x52, 0x81, 0xe0, 0xb7, 0x51,
	0xad, 0xcb, 0x43, 0xe1, 0xb0, 0xd3, 0x7b, 0xcc, 0x05, 0x9d, 0xcd, 0x42, 0xfb, 0xfa, 0xd9, 0xf9,
	0xda, 0xdc, 0xe8, 0x7c, 0xad, 0xb6, 0x9b, 0xa9, 0x68, 0xde, 0x0e, 0xdf, 0x40, 0x95, 0x08, 0x82,
	0x90, 0xfb, 0x5e, 0xbd, 0xa4, 0x5d, 0x96, 0x8d, 0x4b, 0xe5, 0x30, 0x16, 0xd3, 0x44, 0xaf, 0x11,
	0x20, 0xb4, 0x03, 0x2e, 0xa4, 0x32, 0x9f, 0x2f, 0x20, 0x64, 0x2a, 0x9a, 0xb7, 0x6b, 0x12, 0x84,
	0xf6, 0x19, 0xf7, 0x24, 0x53, 0x5d, 0xc6, 0xeb, 0xa8, 0xec, 0x65, 0xf9, 0x2d, 0x1a, 0xef, 0xb2,
	0x4e, 0x4c, 0x6b, 0x9a, 0x7f, 0x5b, 0xa8, 0x72, 0xa0, 0x67, 0x14, 0xf0, 0x27, 0xa8, 0xaa, 0x38,
	0x57, 0x63, 0x6b, 0xfa, 0xfb, 0x26, 0x89, 0xa9, 0x23, 0x79, 0xea, 0xb2, 0x26, 0x2a, 0x6b, 0x12,
	0x6d, 0x91, 0xfb, 0xc7, 0x8f, 0xc0, 0x96, 0xfb, 0x20, 0x59, 0x1b, 0x1b, 0x0c, 0x94, 0xc9, 0x68,
	0x1a, 0x15, 0x7f, 0x63, 0x19, 0xfa, 0x4a, 0x3a, 0x3c, 0x90, 0x59, 0x5d, 0x32, 0x62, 0x6a, 0xd2,
	0x8c, 0xa6, 0x75, 0xe7, 0x58, 0xfd, 0xcb, 0x42, 0x35, 0x63, 0x73, 0x97, 0x87, 0x12, 0x7f, 0x3c,
	0x51, 0x3b, 0x79, 0xb1, 0xda, 0x95, 0xb7, 0xae, 0x7c, 0xc5, 0xa0, 0x54, 0x13, 0x49, 0xae, 0xee,
	0xaf, 0x2d, 0x74, 0x85, 0x4b, 0x70, 0xc3, 0x7a, 0x69, 0x7d, 0x7e, 0xa3, 0xb6, 0xcd, 0x66, 0x5e,
	0x78, 0x7b, 0xc9, 0xa4, 0x73, 0x65, 0x4f, 0xe1, 0xd2, 0x18, 0xbe, 0xf9, 0x55, 0x09, 0x2d, 0x1b,
	0x8b, 0xfd, 0x24, 0xb9, 0xd9, 0xd3, 0xfe, 0xfd, 0x38, 0xed, 0xee, 0xcc, 0xab, 0x4f, 0x6a, 0x9b,
	0x4a, 0xff, 0x97, 0x25, 0x74, 0xbd, 0x60, 0xfb, 0x12, 0xc6, 0xe0, 0xbb, 0xc2, 0x18, 0xf0, 0x97,
	0xd6, 0x88, 0x29, 0xe3, 0xf0, 0x67, 0x79, 0xa2, 0x0d, 0x7a, 0xcb, 0x5e, 0x72, 0xbd, 0xed, 0xa0,
	0x65, 0xc7, 0xf7, 0x7a, 0xb9, 0xe5, 0x64, 0xd6, 0xdc, 0xab, 0xc6, 0x75, 0xf9, 0xee, 0xb8, 0x9a,
	0x16, 0xed, 0xf1, 0x2e, 0x5a, 0x09, 0xfb, 0x7e, 0x20, 0x77, 0x27, 0x76, 0x5f, 0xdd, 0xc4, 0x58,
	0xe9, 0x14, 0xf4, 0x74, 0xc2, 0x03, 0xbf, 0x83, 0x96, 0xb8, 0xed, 0x7b, 0x9d, 0xc3, 0xf7, 0xda,
	0x2c, 0x84, 0x5b, 0x37, 0xeb, 0x65, 0x1d, 0xe2, 0x15, 0x13, 0x62, 0x69, 0x2f, 0xaf, 0xa4, 0xe3,
	0xb6, 0xf8, 0x36, 0x5a, 0x14, 0x81, 0x1f, 0xf1, 0x2e, 0x04, 0xba, 0xfa, 0x2b, 0xda, 0xf7, 0xff,
	0xc6, 0x77, 0xf1, 0x20, 0xa7, 0xa3, 0x63, 0x96, 0xf8, 0x67, 0x0b, 0xd5, 0xdc, 0x74, 0xfb, 0x86,
	0xf5, 0xab, 0x9a, 0xe5, 0xee, 0xec, 0x58, 0xce, 0x56, 0x7d, 0xc6, 0x4e, 0x26, 0x0b, 0x69, 0x3e,
	0x1b, 0x4c, 0x10, 0xb2, 0x99, 0x84, 0x9e, 0x1f, 0x70, 0x08, 0xeb, 0x95, 0xf5, 0xf9, 0x8d, 0x85,
	0xf6, 0x35, 0x75, 0x67, 0xef, 0xa4, 0x52, 0x9a, 0xb3, 0xc0, 0xef, 0x23, 0x1c, 0x0e, 0x85, 0x28,
	0x90, 0x51, 0xd5, 0xdd, 0x58, 0x35, 0x68, 0xb8, 0x33, 0x61, 0x41, 0xff, 0xc5, 0xab, 0xf9, 0x63,
	0x35, 0x5d, 0xb7, 0x7a, 0xc0, 0x6e, 0xa0, 0x4a, 0x00, 0x27, 0xb9, 0xe1, 0x4a, 0x3f, 0x84, 0x34,
	0x16, 0xd3, 0x44, 0xff, 0x5f, 0xbe, 0x99, 0x1b, 0xa8, 0xea, 0x70, 0x1b, 0xbc, 0x10, 0xc2, 0xfa,
	0xbc, 0xae, 0x6f, 0x31, 0xbe, 0x89, 0xb1, 0x8c, 0xa6, 0x5a, 0xfc, 0x10, 0xa1, 0x00, 0x1c, 0x60,
	0x21, 0x74, 0x77, 0xa4, 0x9e, 0x8e, 0xda, 0xf6, 0x1b, 0x2f, 0x76, 0xd3, 0x1f, 0x70, 0x17, 0xb2,
	0x7d, 0x47, 0xd3, 0x28, 0x34, 0x17, 0x11, 0x3f, 0x46, 0x6b, 0xb6, 0x22, 0x8c, 0xcb, 0x53, 0x0a,
	0x8f, 0x87, 0x3c, 0x00, 0x17, 0x3c, 0x19, 0xe6, 0x1b, 0x19, 0x8f, 0xd5, 0xeb, 0x26, 0xd0, 0xda,
	0x1d, 0x65, 0x2e, 0xf9, 0x34, 0x73, 0xfa, 0xbc, 0x78, 0x6a, 0x6c, 0x4d, 0x02, 0xf7, 0x7c, 0x09,
	0x6a, 0xf8, 0xc6, 0xc6, 0x96, 0xe6, 0x74, 0x74, 0xcc, 0x12, 0xff, 0x64, 0xa1, 0xaa, 0x34, 0x8f,
	0xac, 0x7a, 0x45, 0xf7, 0x62, 0x86, 0x9b, 0xa9, 0xf0, 0xa2, 0xcb, 0x16, 0x66, 0x22, 0xa5, 0x69,
	0x32, 0xf8, 0x17, 0x0b, 0x2d, 0x46, 0xcc, 0x19, 0x42, 0xd8, 0xd1, 0x4f, 0x44, 0x3d, 0x7d, 0xb5,
	0xed, 0x93, 0xd9, 0x65, 0x77, 0x98, 0x43, 0xcb, 0x9a, 0x97, 0x97, 0xd2, 0xb1, 0x8c, 0xf0, 0x6f,
	0x16, 0x5a, 0xe1, 0x85, 0xe7, 0x61, 0x7d, 0x41, 0x5f, 0xfc, 0x47, 0xb3, 0x4b, 0xb3, 0xf8, 0x20,
	0xcd, 0xb6, 0x63, 0x51, 0x43, 0x27, 0xb2, 0xc3, 0xdf, 0x5a, 0xea, 0xf6, 0x45, 0xfe, 0x00, 0xba,
	0x75, 0xa4, 0x1b, 0x3a, 0xc3, 0xf7, 0x08, 0x8d, 0x81, 0xda, 0xb5, 0xf8, 0x72, 0xeb, 0x1f, 0x34,
	0x81, 0x6f, 0x76, 0x50, 0x22, 0xc3, 0xaf, 0xa1, 0xab, 0x01, 0xb0, 0xd0, 0xf7, 0xcc, 0x46, 0xb8,
	0x66, 0x2a, 0xba, 0x4a, 0xb5, 0x94, 0x1a, 0xad, 0x7a, 0xd3, 0x76, 0xd5, 0xa0, 0x96, 0xc6, 0xdf,
	0xb4, 0xbb, 0x6a, 0x72, 0xb4, 0xa6, 0xe9, 0xa1, 0x31, 0xc2, 0xf0, 0x43, 0xb4, 0xe0, 0x0b, 0xf0,
	0x76, 0x0e, 0xf6, 0xa2, 0xb7, 0xcc, 0x57, 0x7d, 0x73, 0xea, 0x5d, 0x37, 0xff, 0x49, 0x08, 0x65,
	0x4f, 0xde, 0xfd, 0x54, 0x82, 0xa7, 0x16, 0x4b, 0xfb, 0x7f, 0x06, 0x65, 0xe1, 0x7e, 0x12, 0x87,
	0x66, 0x21, 0xdb, 0xe4, 0xec, 0xa2, 0x31, 0xf7, 0xf4, 0xa2, 0x31, 0xf7, 0xec, 0xa2, 0x31, 0xf7,
	0xf9, 0xa8, 0x61, 0x9d, 0x8d, 0x1a, 0xd6, 0xd3, 0x51, 0xc3, 0x7a, 0x36, 0x6a, 0x58, 0xbf, 0x8f,
	0x1a, 0xd6, 0x0f, 0x7f, 0x34, 0xe6, 0x3e, 0xaa, 0x26, 0x2d, 0xf9, 0x27, 0x00, 0x00, 0xff, 0xff,
	0x06, 0x0e, 0x24, 0x94, 0xc5, 0x0e, 0x00, 0x00,
}

func (m *AppTemplateSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppTemplateSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppTemplateSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IncludedSoftware) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncludedSoftware) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncludedSoftware) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Description)
	copy(dAtA[i:], m.Description)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Description)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Version)
	copy(dAtA[i:], m.Version)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Version)))
	i--
	dAtA[i] = 0x12
	i -= len(m.DisplayName)
	copy(dAtA[i:], m.DisplayName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DisplayName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Maintainer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Maintainer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Maintainer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Package) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Package) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Package) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PackageList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackageList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PackageList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PackageMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackageMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PackageMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PackageMetadataList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackageMetadataList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PackageMetadataList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PackageMetadataSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackageMetadataSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PackageMetadataSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.SupportDescription)
	copy(dAtA[i:], m.SupportDescription)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SupportDescription)))
	i--
	dAtA[i] = 0x42
	if len(m.Categories) > 0 {
		for iNdEx := len(m.Categories) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Categories[iNdEx])
			copy(dAtA[i:], m.Categories[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Categories[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Maintainers) > 0 {
		for iNdEx := len(m.Maintainers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Maintainers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	i -= len(m.ProviderName)
	copy(dAtA[i:], m.ProviderName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ProviderName)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.IconSVGBase64)
	copy(dAtA[i:], m.IconSVGBase64)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IconSVGBase64)))
	i--
	dAtA[i] = 0x22
	i -= len(m.ShortDescription)
	copy(dAtA[i:], m.ShortDescription)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ShortDescription)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.LongDescription)
	copy(dAtA[i:], m.LongDescription)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.LongDescription)))
	i--
	dAtA[i] = 0x12
	i -= len(m.DisplayName)
	copy(dAtA[i:], m.DisplayName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DisplayName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PackageSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackageSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PackageSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Revoked != nil {
		{
			size, err := m.Revoked.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.IncludedSoftware) > 0 {
		for iNdEx := len(m.IncludedSoftware) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncludedSoftware[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	{
		size, err := m.ValuesSchema.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.Template.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	i -= len(m.ReleaseNotes)
	copy(dAtA[i:], m.ReleaseNotes)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ReleaseNotes)))
	i--
	dAtA[i] = 0x32
	i -= len(m.CapactiyRequirementsDescription)
	copy(dAtA[i:], m.CapactiyRequirementsDescription)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CapactiyRequirementsDescription)))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.ReleasedAt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Licenses) > 0 {
		for iNdEx := len(m.Licenses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Licenses[iNdEx])
			copy(dAtA[i:], m.Licenses[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Licenses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.Version)
	copy(dAtA[i:], m.Version)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Version)))
	i--
	dAtA[i] = 0x12
	i -= len(m.RefName)
	copy(dAtA[i:], m.RefName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.RefName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Revoked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Revoked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Revoked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Date)
	copy(dAtA[i:], m.Date)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Date)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ValuesSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValuesSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValuesSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OpenAPIv3.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AppTemplateSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *IncludedSoftware) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisplayName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Version)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Description)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *Maintainer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *Package) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PackageList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *PackageMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PackageMetadataList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *PackageMetadataSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisplayName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.LongDescription)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ShortDescription)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.IconSVGBase64)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ProviderName)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Maintainers) > 0 {
		for _, e := range m.Maintainers {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Categories) > 0 {
		for _, s := range m.Categories {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.SupportDescription)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PackageSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RefName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Version)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Licenses) > 0 {
		for _, s := range m.Licenses {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = m.ReleasedAt.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CapactiyRequirementsDescription)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ReleaseNotes)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Template.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ValuesSchema.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.IncludedSoftware) > 0 {
		for _, e := range m.IncludedSoftware {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Revoked != nil {
		l = m.Revoked.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *Revoked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Date)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ValuesSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OpenAPIv3.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AppTemplateSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppTemplateSpec{`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "AppSpec", "v1alpha1.AppSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IncludedSoftware) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IncludedSoftware{`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Maintainer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Maintainer{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Package) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Package{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "PackageSpec", "PackageSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PackageList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]Package{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "Package", "Package", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&PackageList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *PackageMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PackageMetadata{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "PackageMetadataSpec", "PackageMetadataSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PackageMetadataList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]PackageMetadata{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "PackageMetadata", "PackageMetadata", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&PackageMetadataList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *PackageMetadataSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMaintainers := "[]Maintainer{"
	for _, f := range this.Maintainers {
		repeatedStringForMaintainers += strings.Replace(strings.Replace(f.String(), "Maintainer", "Maintainer", 1), `&`, ``, 1) + ","
	}
	repeatedStringForMaintainers += "}"
	s := strings.Join([]string{`&PackageMetadataSpec{`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`LongDescription:` + fmt.Sprintf("%v", this.LongDescription) + `,`,
		`ShortDescription:` + fmt.Sprintf("%v", this.ShortDescription) + `,`,
		`IconSVGBase64:` + fmt.Sprintf("%v", this.IconSVGBase64) + `,`,
		`ProviderName:` + fmt.Sprintf("%v", this.ProviderName) + `,`,
		`Maintainers:` + repeatedStringForMaintainers + `,`,
		`Categories:` + fmt.Sprintf("%v", this.Categories) + `,`,
		`SupportDescription:` + fmt.Sprintf("%v", this.SupportDescription) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PackageSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForIncludedSoftware := "[]IncludedSoftware{"
	for _, f := range this.IncludedSoftware {
		repeatedStringForIncludedSoftware += strings.Replace(strings.Replace(f.String(), "IncludedSoftware", "IncludedSoftware", 1), `&`, ``, 1) + ","
	}
	repeatedStringForIncludedSoftware += "}"
	s := strings.Join([]string{`&PackageSpec{`,
		`RefName:` + fmt.Sprintf("%v", this.RefName) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Licenses:` + fmt.Sprintf("%v", this.Licenses) + `,`,
		`ReleasedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ReleasedAt), "Time", "v1.Time", 1), `&`, ``, 1) + `,`,
		`CapactiyRequirementsDescription:` + fmt.Sprintf("%v", this.CapactiyRequirementsDescription) + `,`,
		`ReleaseNotes:` + fmt.Sprintf("%v", this.ReleaseNotes) + `,`,
		`Template:` + strings.Replace(strings.Replace(this.Template.String(), "AppTemplateSpec", "AppTemplateSpec", 1), `&`, ``, 1) + `,`,
		`ValuesSchema:` + strings.Replace(strings.Replace(this.ValuesSchema.String(), "ValuesSchema", "ValuesSchema", 1), `&`, ``, 1) + `,`,
		`IncludedSoftware:` + repeatedStringForIncludedSoftware + `,`,
		`Revoked:` + strings.Replace(this.Revoked.String(), "Revoked", "Revoked", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Revoked) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Revoked{`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValuesSchema) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValuesSchema{`,
		`OpenAPIv3:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.OpenAPIv3), "RawExtension", "runtime.RawExtension", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AppTemplateSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppTemplateSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppTemplateSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &v1alpha1.AppSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncludedSoftware) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncludedSoftware: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncludedSoftware: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Maintainer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Maintainer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Maintainer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Package) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Package: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Package: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackageList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackageList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackageList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, Package{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackageMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackageMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackageMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackageMetadataList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackageMetadataList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackageMetadataList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, PackageMetadata{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackageMetadataSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackageMetadataSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackageMetadataSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LongDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconSVGBase64", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconSVGBase64 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maintainers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Maintainers = append(m.Maintainers, Maintainer{})
			if err := m.Maintainers[len(m.Maintainers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Categories", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Categories = append(m.Categories, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackageSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackageSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackageSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Licenses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Licenses = append(m.Licenses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleasedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReleasedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CapactiyRequirementsDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CapactiyRequirementsDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseNotes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReleaseNotes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Template.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuesSchema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValuesSchema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludedSoftware", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludedSoftware = append(m.IncludedSoftware, IncludedSoftware{})
			if err := m.IncludedSoftware[len(m.IncludedSoftware)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Revoked == nil {
				m.Revoked = &Revoked{}
			}
			if err := m.Revoked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Revoked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Revoked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Revoked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Date = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValuesSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValuesSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValuesSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenAPIv3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OpenAPIv3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
